@startmindmap "Disadvantages"

' Look for the Art of Scalability as a book Martin L Abbot

+ Disadvantages

++ Many, many, options\nCan be bad if...
+++_ organization makes **one choice**
++++_ Programming idiom
++++_ Achitectural Style
+++_ slow pace of change and lots of **beurocratic red tape**
++++_ Leads to tension

++ Takes a long time to\nget the benefits
+++ Lots of front-loading
++++_ teething issues
++++_ finding new things that needed automating
++++_ scripting, tooling
+++_ from standing start
++++ projected effort
+++++_ 1st 2 services between 2 - 5 months 
+++++_ another 12 months to get 10 out
+++++_ 18 months = 60 microservices
+++_ No great returns in 1st 6 months


++ Testing more complex
+++ Automation
++++_ is critical!
+++_ What kind of tests?
+++ E2E testing
++++_ Cannot rely as much on integration testing

++ Monitoring more complex
+++_ Is there a problem?
+++_ Where is the problem?

++ Resiliency
+++_ is not free
++++_ Easy to become less reliable
++++_ Cascading failures are dangerous
+++++_ due to a single network failure
+++_ understand and study
++++ Resiliency Patterns

++ Lots more boxes
+++_ One service per host or OS
+++_ Must automate management of infrastructure
++++_ Deployment
++++_ Configuration of environments
++++_ Many more moving parts
++++_ Platform engineering

++ Distributed systems are hard
+++_ Knowledge required of
++++_ Transactional integrity
++++_ Consistency and linearizability
++++ CAP theory
+++ Transactional shortcomings
++++_ Re-examine requirements for
+++++ Transactional integrity
++++ Conversations
+++++_ with users and stakeholders
++++_ Understand how **system behavior** will vary in different situations

@endmindmap

