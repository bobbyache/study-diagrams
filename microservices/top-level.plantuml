@startmindmap

+ Microservices

++ Type of opinionated SOA archtitecture
++ Small autonomous services that work well together
+++ Properties
++++ Size does not matter as much
++++ Communicate over APIs, events and messages (no database integration)
++++ High degree of autonomy
+++++ Independent Processes
++++++ Change and deploy independently
+++++ **Small, and focused on doing one thing well**
++++ Own their own data
+++++ Do NOT share databases

++ 3 dimensions of scalability\n(envision 3 dimensions of a rubiks cube)
+++ **Functional decomposition (microservices)**
+++ Horizontal duplication
+++ Data Partitioning

++ Represented via
+++ Hexagonals with lines drawn between them
+++ Hexagonal name based on what it does
++++ Customer Service
++++ Invoicing
++++ Inventory
++++ Shipping
++++ Returns
++ encapsulate data storage and retrieval, exposing data, via well-defined interfaces. So databases are hidden inside the service boundary.
++ Allow for technology agnosticism
++ Independent deployability

++ Allow the business domain to be modelled
++ Advantages
+++ Allow you to mix and match technology
+++ Work on in parrallel
+++ Developers understand their part of the system
+++ Allow flexibility
++ Challenges
+++ SOA is about many small machines and not mainframes
++++ So the challenge is networks
+++++ Latency
+++++ Networks can fail and packets can get lost
+++++ Transactions are much more difficult
+++++ You may have to ditch transactions and the safety they bring
++++ Consistent view of data across multiple machine
++++ New technologies can be used badly


' + Binary Trees
' ++_ Path finding, building paths, determining paths **best done recursively**
' ++_ With recursion, establish consistent type for base cases
' ++_ Trees never have cycles.

' ++ Basic Traversals
' +++ Can be done iteratively (breadth or depth-first)\n...and recursively
' +++[#lightgreen] Tree sum
' +++[#lightgreen] Tree includes
' +++[#lightgreen] Tree min sum

' ++[#lightgreen] Max Root to Leaf Path Sum
' +++_ Best solved with a depth-first, recursive approach

' ++[#lightgreen] Value count
' +++_ Base case null node returns 0
' +++_ Ternary operator to check for value match, 1 if matched
' +++_ Add left and right with 1 if value matched.

' ++[#lightgreen] How high
' +++_ Solution is **recursive**
' ++++_ Base case null node is given value -1
' ++++_ Higher level recursive calls add 1 to max value logic
' +++_ It **can be done iteratively**

' ++[#lightgreen] Bottom Right Value
' +++_ Breadth-first traversal
' +++_ First queue left, then right. Last item dequeued is answer

' ++[#lightgreen] Leaf List
' +++_ Single dimension array construction
' +++_ Must use a depth-first
' ++++_ Leaves can be found on all levels
' ++++_ (breadth-first might find right leaves first)
' +++_ Recursive
' ++++_ Use helper function
' ++++_ Recursive call passes by ref leaf values array

' ++ 2-D Array\nConstruction

' +++[#lightgreen] Tree Path Finder
' ++++_ Solution is **recursive**
' ++++_ Returns an array of values
' ++++_ Base cases should be null or a leave node value as single item array
' ++++_ Avoid array building inefficiency
' +++++_ helper recursive function
' +++++_ push rather than shift
' +++++_ reverse result array in top level function

' +++[#lightgreen] All Tree Paths
' ++++_ Solution is **recursive**
' ++++_ Important pattern involving array construction
' ++++_ Better efficiency
' +++++_ rather push onto inner array
' +++++_ reverse all inner arrays after construction
' ++++_ Base cases
' +++++_ Null nodes are empty arrays
' +++++_ Leaf nodes are 2 dimensional.
' ++++++_ 1 outer array containing...
' ++++++_ a single node inner array.


' +++[#lightgreen] Tree levels
' ++++_ Iterative
' +++++_ Solved with depth or breadth first
' +++++_ Store level with node on stack or queue
' ++++_ Recursive
' +++++_ Use helper function
' +++++_ Recursive call passes by ref levels array with level

' ++++[#lightgreen] Level Averages
' +++++_ Variation of **Tree Levels**




@endmindmap

