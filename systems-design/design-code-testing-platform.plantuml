


@startmindmap "Design Code Testing Platform

'+ Gathering requirements

'+ Coming up with a plan

+ Design

++ Static UI Content
+++ Storage
++++_ Blob store (Google Cloud Storage, S3, Azure blob storage)
+++ Content delivery
++++_ Content delivery network (CDN)
++++_ Better mobile experience

++ Main Clusters and Load Balancing
+++_ 2 primary clusters targeting India, US
+++_ DNS load balancing up front
+++_ Path-based load balancing for service access
+++_ Round robin load balancing for service sets\nhandled at path based load balancing layer

++ Static API Content
+++_ List of questions and solutions
+++_ Store in blob store

++ Caching
+++ Client side caching
++++_ load questions once per session
++++_ save 2 - 3 calls per session
++++_ reduce load on backend servers

+++ In-memory caching
++++_ on servers
++++_ approx 100 questions, 10 languages, 5KB code
++++_ 100 * 10 * 5000 = 5MB of memory data... fine.
++++ Invalidate and evict data
+++++_ every 30 min

++ Access Control List (ACL)
+++_ straight foward ACL
++++_ non-paid users can't access questions
++++_ internal api call to establish paid vs. non-paid

++ User Data Storage
+++_ SQL database (Postgress, My SQL)\nas this will be queried a lot.
+++_ 2 tables
++++_ question_completion_status
+++++_ unique constraint (user_id, questionId)
+++++_ index on user_id
++++_ user_solutions
+++++_ unique constraint (user_id, questionId)
+++++_ index on user_id
+++ Storage Performance
++++_ marking as complete\nand typing code
+++++_ 1 - 3 second debounce
+++++_ easily handled by SQL database
+++++_ 10 000 user active, 1000 writes a sec
++++_ 2 major database servers (regions)
+++++_ async replication every 12 hours
+++++_ (adjustable) across continents 


++ Code Execution
+++ Rate limiting
++++_ Use K-V store like Redis to prevent DoS attacks
++++_ Limit code runs 1/sec, 3/5secs 5/min
+++ Workers
++++_ Set of special servers
++++_ always online, cleanup after every code run
++++_ signal their availability after run (or timeout)\nto backend servers
++++_ backend servers return result to UI in same req
++++ Compiling
+++++_ Some languages require compile
+++++_ Avg. 1 second compile and run.
+++++_ 10 code runs /sec * 10 000 users will require\n10-100 machines to meet 1-3 sec latency
+++++_ Can scale horizontally if needed (also vertically)

+++ Loging and monitoring
++++_ log code run events per language, user, question, avg response time
++++_ helps with scaling decisions
++++_ helps with detecting malicious behavior

@endmindmap
