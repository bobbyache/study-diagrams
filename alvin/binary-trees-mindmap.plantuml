@startmindmap

+ Binary Trees
++_ Path finding, building paths, determining paths **best done recursively**
++_ With recursion, establish consistent type for base cases
++_ Trees never have cycles.

++ Basic Traversals
+++ Can be done iteratively (breadth or depth-first)\n...and recursively
+++[#lightgreen] Tree sum
+++[#lightgreen] Tree includes
+++[#lightgreen] Tree min sum

++[#lightgreen] Max Root to Leaf Path Sum
+++_ Best solved with a depth-first, recursive approach

++[#lightgreen] Value count
+++_ Base case null node returns 0
+++_ Ternary operator to check for value match, 1 if matched
+++_ Add left and right with 1 if value matched.

++[#lightgreen] How high
+++_ Solution is **recursive**
++++_ Base case null node is given value -1
++++_ Higher level recursive calls add 1 to max value logic
+++_ It **can be done iteratively**

++[#lightgreen] Bottom Right Value
+++_ Breadth-first traversal
+++_ First queue left, then right. Last item dequeued is answer

++[#lightgreen] Leaf List
+++_ Single dimension array construction
+++_ Must use a depth-first
++++_ Leaves can be found on all levels
++++_ (breadth-first might find right leaves first)
+++_ Recursive
++++_ Use helper function
++++_ Recursive call passes by ref leaf values array

++ 2-D Array\nConstruction

+++[#lightgreen] Tree Path Finder
++++_ Solution is **recursive**
++++_ Returns an array of values
++++_ Base cases should be null or a leave node value as single item array
++++_ Avoid array building inefficiency
+++++_ helper recursive function
+++++_ push rather than shift
+++++_ reverse result array in top level function

+++[#lightgreen] All Tree Paths
++++_ Solution is **recursive**
++++_ Important pattern involving array construction
++++_ Better efficiency
+++++_ rather push onto inner array
+++++_ reverse all inner arrays after construction
++++_ Base cases
+++++_ Null nodes are empty arrays
+++++_ Leaf nodes are 2 dimensional.
++++++_ 1 outer array containing...
++++++_ a single node inner array.


+++[#lightgreen] Tree levels
++++_ Iterative
+++++_ Solved with depth or breadth first
+++++_ Store level with node on stack or queue
++++_ Recursive
+++++_ Use helper function
+++++_ Recursive call passes by ref levels array with level

++++[#lightgreen] Level Averages
+++++_ Variation of **Tree Levels**




' ++[#lightgreen] Problem
' +++_ desc
' +++_ des
' ++[#lightgreen] Problem
' +++_ desc
' +++_ des
' ++[#lightgreen] Problem
' +++_ desc
' +++_ des
' ++[#lightgreen] Problem
' +++_ desc
' +++_ des
' ++[#lightgreen] Problem
' +++_ desc
' +++_ des



@endmindmap

