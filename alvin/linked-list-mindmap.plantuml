@startmindmap

+ Linked List
++_ Thinking recursively
+++_ A linked list contains many other smaller lists
+++_ A universal base case is when head is null

++ Basic Traversals

+++[#lightgreen] Linked List Values
++++_ Builds on the basic traversal pattern
++++_ Recusive solution uses a helper recursion function

+++[#lightgreen] Get Node Value
++++_ Iterative traversal increments the index\n... until matched
++++_ **Recursion:** decrements the index argument\n...count down to 0 to match

+++[#lightgreen] Find
+++[#lightgreen] Sum List

+++[#lightgreen] Is Univalue?
++++_ Traverse until my current value is diff from head's value\n...return false\n...otherwise return true
++++_ **Recursion:**
+++++_ End of the list is when head is null
+++++_ Pass previous value into recursive call

+++[#lightgreen] Longest streak
++++_ **Only solve this iteratively**
++++_ No tricks, simply use max logic and traverse

++ Multi-pointer Traversals

+++[#lightgreen] Reverse
++++_ Maintain prev, current, and next pointers
++++_ **Reverse current.next to point to prev**
++++_ return prev as head of new linked list

+++[#lightgreen] Zipper
++++_ Maintain **tail**, current1, current2 pointers
++++_ Tail is initialized to current1
++++_ Use modulus to alternate and pick next list to add to tail
++++_ Tack on rest of longest to end of shortest (tail.next)
++++_ return initial head1

+++ Dummy Head
++++_ Useful technique to **create new linked lists.**
++++_ Use dummy node pattern on iterative approach\n...to prevent clunky code
++++_ Track with tail, return dummyNode.**next**

++++[#lightgreen] Merge
+++++_ Lists must be sorted
++++++_ track with tail, current1, current2
++++++_ Begin comparing which is smaller to add to dummy node
+++++_ Tack on rest of longest to end of shortest (tail.next)
+++++_ **Recursion:**
++++++_ No dummy node required
++++++_ Helps to think of moving from back to front of list\n...always return the front of the list

++++[#lightgreen] Create Linked list
+++++_ **Recursion:**
++++++_ No dummy node required\n...classic array index tracking pattern
++++++_ Helps to think of moving from back to front of list\n...always return the front of the list


+++[#lightgreen] Remove node
++++_ Set prev to current.next
++++_ **Recursion:** worth understanding

@endmindmap

