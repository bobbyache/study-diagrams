@startmindmap

+ Arrays & Strings
++[#grey] Sorted
+++_ **yes**
++++_ find
+++++_ binary search
++++[#lightgreen] Remove Duplicates
+++++_ edit in place using shifting pointers
+++_ **no**
++++[#lightgreen] find contigious sub-array
+++++_ Kaldane's algorithm
+++++_ Sliding window (concertina)
++++_ Find 2 numbers\nto sum to input
+++++_ Inverse hash lookup
++[#lightgreen] Simple
+++[#lightblue] isPrime
++++_ loop from 2 to n-1 using modulus to check for factor
++++_ use sqrt(n) efficiency trick
++[#lightgreen] Frequency Counter
+++[#lightblue] Is Anagram
++++_ str 1 - Build hash map keyed on characters and their frequency
++++_ str 2 - Check for exisence of char and negate frequency if found
++++_ Ensure all hash map character frequency counts are zero
+++[#lightblue] Most Frequent Character
++++_ Iterate through the string, recording character counts in an (ordered) map
++++_ Iterate through map to find maximum count\n(using max value logic), return the key

++[#lightgreen] Shifting Pointers
+++[#lightblue] Uncompress
++++_ Use while loop
++++_ Use front pointer to determine end of numeric clusters
++++_ Difference between front pointer and back pointer to parse number portion
++++_ Inner for loop spread out character sequence
+++[#lightblue] Compress
++++_ Use while loop
++++_ Use front pointer to determine end of streak
++++_ Difference between front pointer and back pointer to determine number of compression
+++[#lightblue] Backspace Compare
++++_ Shift pointers from back to front


@endmindmap

