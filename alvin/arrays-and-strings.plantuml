@startmindmap "Arrays and Strings"

+ Arrays & Strings
++[#lightgreen] Simple
+++[#lightblue] isPrime
++++_ loop from 2 to n-1 using modulus to check for factor
++++_ use sqrt(n) efficiency trick
+++[#lightblue] fibonacci
++++_ anything below 2, just return the input number
++++_ init prev = 0, cur = 1, total = 0
++++_ begin loop at 2 and set total to cur + prev
++++_ set cur = total and prev = cur
+++[#lightblue] factorial
++++_ 5! = 5 * 4 * 3 * 2 * 1
++++_ set total = 1 (avoid multiply by zero)
+++[#lightblue] best time to\nbuy and sell stock
++++_ Simple iteration: track min and profit
++++_ min logic on "min" OR  max logic on cur index - min, return profit

++[#lightgreen] Dynamic Programming
+++[#lightgreen] find max contigious sub-array
++++_ **Kadane's algorithm**
++++_ maxEndingHere = max(maxEndingHere + cur_num, cur_num)
++++_ maxSoFar = max(maxEndingHere, maxSoFar)

++[#lightgreen] Shifting Pointers
+++_ both left\nmove forward
++++[#lightblue] Uncompress
+++++_ Use while loop
+++++_ Use front pointer to determine end of numeric clusters
+++++_ Difference between front pointer and back pointer to parse number portion
+++++_ Inner for loop spread out character sequence
++++[#lightblue] Compress
+++++_ Use while loop
+++++_ Use front pointer to determine end of streak
+++++_ Difference between front pointer and back pointer to determine number of compression
++++[#lightblue] Move Zeros
+++++_ **swap** without changing array
+++++_ left pointer sits on a current zero
+++++_ right pointer scouts for a non-zero
+++++_ if not shifting together (on zeros), all positions between should be zeros\n(including the left pointer position)
+++++[#lightgreen] Remove element
++++++_ in place swap and return new length (exact same algorithm)
+++++[#lightgreen] Remove Duplicates
++++++_ store last number moved and overwrite index
++++++_ move forward with scout pointer and\nreplace new numbers at overwrite index
++++++_ Increment the overwrite index every\ntime it changes, in the end return it
++++++[#lightgreen] Remove Duplicates II
+++++++_ Can be solved in much the same way...\nin fact both can be solved almost identically

+++_ outside in
++++[#lightblue] Find closest pair sum
+++++_ Must be **sorted**
+++++_ move inwards depending on whether > or < to target
+++++[#lightblue] Find pair that sums to
++++++_ if found return true
+++++[#lightblue] Sum Zero
++++++_ return two values that sum to zero
++++[#lightblue] Five Sort
+++++_ while pointers don't cross
+++++_ Decrement back pointer in until != 5
+++++_ Increment front pointer until 5, then swop with back pointer
++++[#lightblue] Container with most water
+++++_ move inwards from smaller of two heights
+++++_ min of heights * (right - left)
+++++_ max logic on maxArea

' Busy editing this in place...

++++[#lightblue] Trapping rainwater
+++++_ move inwards from smaller of two heights
+++++_ smaller wall determines current height of water (smaller wall - cur height)
+++++_ while moving the smaller height inwards - know the other must be a wall
+++++_ trappable_water = min(maxL, maxR) - current_height

+++_ keep halving
++++[#lightblue] Binary Search
+++++_ Keep going until pointers cross (left <= right)
++++++_ smaller? new right is middle - 1
++++++_ larger? new left is middle + 1
+++++[#lightblue] Search Insert Position
++++++_ binary search to find at index (until pointers cross)
++++++_ calculate position of insertion\nwhen not found
+++++++_ its < vals[mid] then mid, else mid + 1

+++_ both right\nmove backward 
++++[#lightblue] Backspace Compare
+++++_ Shift pointers from back to front

+++_ 3 pointers
++++[#lightblue] Three Number Sum
+++++_ Main traversal pointer (i) iterates from start to finish
+++++_ left initializes to 1 ahead and right initializes at end of array
+++++_ Left and right move inwards (i + left + right)

++[#lightgreen] Lookups
+++[#lightblue] Pair Sum & Pair Product
++++_ Iterate once, store complement as key and index as value
++++_ During this iteration, check that complement doesn't already exist...

+++[#lightgreen] Frequency Counter
++++[#lightblue] Is Anagram
+++++_ str 1 - Build hash map keyed on characters and their frequency
+++++_ str 2 - Check for exisence of char and negate frequency if found
+++++_ Ensure all hash map character frequency counts are zero
++++[#lightblue] Most Frequent Character
+++++_ Iterate through the string, recording character counts in an (ordered) map
+++++_ Iterate through map to find maximum count\n(using max value logic), return the key
++++[#lightblue] Same array, but squared
+++++_ Use 2 maps store values from both arrays
+++++_ Store both values and their frequencies
+++++_ Cycle through 1 and check that its counterpart in the other map is itself squared

++[#lightgreen] Sliding Window
+++[#lightblue] Minimum Sub-array Length
++++_ Initialize the window by traversing until the sum of values is >= the target
++++_ Start creeping it forwards by subtracting the left pointer value and shift it up by 1
++++_ At the same time, apply min/max logic on the width.
@endmindmap

